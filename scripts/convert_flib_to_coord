#!/usr/bin/env python

from __future__ import division, print_function

__author__ = "Felix Simkovic"
__date__ = "16 Sep 2017"

import argparse
import Bio.PDB
import Bio.PDB.Polypeptide
import Bio.SeqIO
import math
import multiprocessing
import os
import shutil
import sys
import tempfile
import warnings
warnings.simplefilter("ignore")


def generate_command_line_interface():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-n", dest="fragment_number", default=0,
                        type=int, help="Top-N fragments by Flib score [0 means all]")
    parser.add_argument("-t", dest="threads", default=1,
                        type=int, help="Number of threads")
    parser.add_argument("-i", dest="input", nargs="+",
                        required=True, help="Flib fragment library file(s)")
    parser.add_argument("-o", dest="output", required=True,
                        help="Output directory")
    parser.add_argument("-p", dest="database", required=True,
                        help="Path to the PDB structure database")
    return parser.parse_args()


def extract_data_from_flib_line(line):
    pdb, chain, start, end, seq, _, _, _, length, _, _, _, score = line.strip().split()
    return pdb.lower(), chain, int(start), int(end), seq, int(length), float(score)


def extract_fragment_coordinates(fragment_entry):
    structure_file, fragment_file, fragment_chain, relative_fragment_start, relative_fragment_end, fragment_sequence \
        = fragment_entry

    structure = read_structure_file(structure_file)
    chain = structure[0][fragment_chain]

    ppb = Bio.PDB.PPBuilder()
    peptides = ppb.build_peptides(chain)
    offset = 0
    for i, pep in enumerate(peptides):
        peptide_sequence = str(pep.get_sequence())
        if fragment_sequence in peptide_sequence:
            offset = relative_fragment_start \
                - peptide_sequence.index(fragment_sequence)
            break

    try:
        absolute_fragment_start = pep[relative_fragment_start - offset].id[1]
        absolute_fragment_end = pep[relative_fragment_end - offset].id[1]
    except:
        sys.stderr.write("Error extrating fragment: %s\n" % fragment_file)
        return

    residues_to_keep = range(absolute_fragment_start,
                             absolute_fragment_end + 1)
    for model in structure.copy():
        for chain in model:
            if chain.id == fragment_chain:
                for residue in chain:
                    if int(residue.id[1]) not in residues_to_keep:
                        structure[model.id][chain.id].detach_child(residue.id)
            else:
                structure[model.id].detach_child(chain.id)

    save_fragment_file(fragment_file, structure)
    validate_fragment_coords(fragment_file, fragment_sequence)


def read_structure_file(structure_file):
    parser = Bio.PDB.PDBParser(PERMISSIVE=1)
    return parser.get_structure("", structure_file)


def save_fragment_file(fragment_f, structure):
    s = Bio.PDB.PDBIO()
    s.set_structure(structure)
    s.save(fragment_f)


def validate_fragment_coords(fragment_f, fragment_seq):
    with open(fragment_f, "r") as f_in:
        sequences = list(Bio.SeqIO.parse(f_in, "pdb-atom"))
        written_seq = str(sequences[0].seq).replace("X", "")
        if len(sequences) > 1:
            sys.stderr.write("More than one sequence written ...\n")
        elif written_seq != fragment_seq:
            sys.stderr.write("Sequences do not match ...\n")
            sys.stderr.write(fragment_seq + "\n")
            sys.stderr.write(written_seq + "\n")


def main():
    args = generate_command_line_interface()
    if os.path.isdir(args.output):
        shutil.rmtree(args.output)
    os.mkdir(args.output)
    sys.stdout.write("Provided Flib libraries are %s ...\n" %
                     ", ".join(args.input))

    fragment_entries = []
    for lib_file in args.input:
        for fragl in open(lib_file, 'r'):
            if not fragl.strip():
                continue
            fragment_pdb, fragment_chain, fragment_start, \
                fragment_end, fragment_sequence, fragment_length, fragment_score \
                = extract_data_from_flib_line(fragl)
            structure_file = os.path.join(args.database, fragment_pdb + '.pdb')
            fragment_file = os.path.join(args.output,
                                         fragment_pdb + "_{}.pdb".format(fragment_sequence))
            entry = [structure_file, fragment_file, fragment_chain,
                     fragment_start, fragment_end, fragment_sequence]
            fragment_entries += [(fragment_score, entry)]

    if args.fragment_number > 0:
        fragment_entries = sorted(fragment_entries, key=lambda x: x[0])
        fragment_entries = fragment_entries[:args.fragment_number]

    sys.stdout.write("Extracting a total of %d fragments ...\n" %
                     len(fragment_entries))
    pool = multiprocessing.Pool(args.threads)
    fragments_to_extract = [e[1] for e in fragment_entries]
    pool.map(extract_fragment_coordinates, fragments_to_extract)


if __name__ == "__main__":
    main()
